{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate\n// import { supabase } from \"../supabaseClient\";\n\n// function Login() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//     role: \"\", // No default role value\n//   });\n//   const [error, setError] = useState(\"\"); // State for error messages\n//   const [redirectMessage, setRedirectMessage] = useState(\"\"); // State for redirect message\n//   const navigate = useNavigate(); // Initialize navigate function\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   setError(\"\"); // Reset error message\n\n//   //   try {\n//   //     // Check if the email exists in the 'users' table\n//   //     const { data, error: queryError } = await supabase\n//   //       .from(\"users\")\n//   //       .select(\"*\")\n//   //       .eq(\"email\", formData.email)\n//   //       .single(); // .single() fetches one row, returns null if no match\n\n//   //     if (queryError) {\n//   //       throw queryError; // If there's an error with the query, handle it\n//   //     }\n\n//   //     if (data) {\n//   //       // If user exists, verify the password\n//   //       if (data.password === formData.password) {\n//   //         console.log(\"Login Successful\");\n//   //         setRedirectMessage(\"Redirecting to Home...\");\n//   //         setTimeout(() => navigate(\"/Home\"), 2000); // Redirect after 2 seconds\n//   //       } else {\n//   //         setError(\"Incorrect password\");\n//   //       }\n//   //     } else {\n//   //       setError(\"User not found. Please register first.\");\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(\"Error during login:\", error);\n//   //     setError(\"An error occurred during login.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Check if the email exists in the 'users' table\n//       const { data, error: queryError } = await supabase\n//         .from(\"users\")\n//         .select(\"*\")\n//         .eq(\"email\", formData.email)\n//         .single(); // .single() fetches one row, returns null if no match\n\n//       if (queryError) {\n//         throw queryError; // If there's an error with the query, handle it\n//       }\n\n//       if (data) {\n//         // If user exists, verify the password\n//         if (data.password === formData.password) {\n//           console.log(\"Login Successful\");\n//           setRedirectMessage(\"Redirecting to Home...\");\n//           setTimeout(() => {\n//             // Pass the user id to the Home component via navigate state\n//             navigate(\"/Home\", { state: { userId: data.id } });\n//           }, 2000); // Redirect after 2 seconds\n//         } else {\n//           setError(\"Incorrect password\");\n//         }\n//       } else {\n//         setError(\"User not found. Please register first.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error during login:\", error);\n//       setError(\"An error occurred during login.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Login</h1>\n//         {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}{\" \"}\n//         {/* Display error message */}\n//         {redirectMessage && (\n//           <p className=\"text-green-500 text-center mb-4\">{redirectMessage}</p>\n//         )}{\" \"}\n//         {/* Display redirect message */}\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"bg-purple-900 p-6 rounded-lg shadow-lg\"\n//           autoComplete=\"off\"\n//         >\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">\n//               Email\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\" // Corrected name to match state key\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-email\"\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"password\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\" // Corrected name to match state key\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-password\"\n//             />\n//           </div>\n\n//           <div className=\"mb-6\">\n//             <label htmlFor=\"role\" className=\"block text-lg font-medium mb-2\">\n//               Role\n//             </label>\n//             <select\n//               id=\"role\"\n//               name=\"role\"\n//               value={formData.role}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//             >\n//               <option value=\"\">Select a role</option>\n//               <option value=\"User\">User</option>\n//               <option value=\"Admin\">Admin</option>\n//               <option value=\"Moderator\">Moderator</option>\n//             </select>\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n//           >\n//             Login\n//           </button>\n//         </form>\n//         <div className=\"mt-4 text-center\">\n//           <p>\n//             Don't have an account?{\" \"}\n//             <a href=\"/\" className=\"text-purple-400\">\n//               Register\n//             </a>\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Login;\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { supabase } from \"../supabaseClient\";\n// import bcrypt from \"bcryptjs\"; // Import bcryptjs for password comparison\n\n// function Login() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [redirectMessage, setRedirectMessage] = useState(\"\");\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Fetch user data from the 'users' table\n//       const { data, error: queryError } = await supabase\n//         .from(\"users\")\n//         .select(\"*\")\n//         .eq(\"email\", formData.email)\n//         .single();\n\n//       if (queryError) throw queryError;\n\n//       if (data) {\n//         // Compare entered password with the hashed password from Supabase\n//         const isPasswordValid = await bcrypt.compare(formData.password, data.password);\n\n//         if (isPasswordValid) {\n//           console.log(\"Login Successful\");\n//           setRedirectMessage(\"Redirecting to Home...\");\n//           setTimeout(() => navigate(\"/Home\", { state: { userId: data.id } }), 2000); // Redirect after 2 seconds\n//         } else {\n//           setError(\"Incorrect password\");\n//         }\n//       } else {\n//         setError(\"User not found. Please register first.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error during login:\", error);\n//       setError(\"An error occurred during login.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Login</h1>\n//         {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\n//         {redirectMessage && <p className=\"text-green-500 text-center mb-4\">{redirectMessage}</p>}\n//         <form onSubmit={handleSubmit} className=\"bg-purple-900 p-6 rounded-lg shadow-lg\" autoComplete=\"off\">\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"password\" className=\"block text-lg font-medium mb-2\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">Login</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Login;","map":{"version":3,"names":[],"sources":["/home/saitejasangisapu/Desktop/new project/rbac/src/components/Login.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate\n// import { supabase } from \"../supabaseClient\";\n\n// function Login() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//     role: \"\", // No default role value\n//   });\n//   const [error, setError] = useState(\"\"); // State for error messages\n//   const [redirectMessage, setRedirectMessage] = useState(\"\"); // State for redirect message\n//   const navigate = useNavigate(); // Initialize navigate function\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   setError(\"\"); // Reset error message\n\n//   //   try {\n//   //     // Check if the email exists in the 'users' table\n//   //     const { data, error: queryError } = await supabase\n//   //       .from(\"users\")\n//   //       .select(\"*\")\n//   //       .eq(\"email\", formData.email)\n//   //       .single(); // .single() fetches one row, returns null if no match\n\n//   //     if (queryError) {\n//   //       throw queryError; // If there's an error with the query, handle it\n//   //     }\n\n//   //     if (data) {\n//   //       // If user exists, verify the password\n//   //       if (data.password === formData.password) {\n//   //         console.log(\"Login Successful\");\n//   //         setRedirectMessage(\"Redirecting to Home...\");\n//   //         setTimeout(() => navigate(\"/Home\"), 2000); // Redirect after 2 seconds\n//   //       } else {\n//   //         setError(\"Incorrect password\");\n//   //       }\n//   //     } else {\n//   //       setError(\"User not found. Please register first.\");\n//   //     }\n//   //   } catch (error) {\n//   //     console.error(\"Error during login:\", error);\n//   //     setError(\"An error occurred during login.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Check if the email exists in the 'users' table\n//       const { data, error: queryError } = await supabase\n//         .from(\"users\")\n//         .select(\"*\")\n//         .eq(\"email\", formData.email)\n//         .single(); // .single() fetches one row, returns null if no match\n\n//       if (queryError) {\n//         throw queryError; // If there's an error with the query, handle it\n//       }\n\n//       if (data) {\n//         // If user exists, verify the password\n//         if (data.password === formData.password) {\n//           console.log(\"Login Successful\");\n//           setRedirectMessage(\"Redirecting to Home...\");\n//           setTimeout(() => {\n//             // Pass the user id to the Home component via navigate state\n//             navigate(\"/Home\", { state: { userId: data.id } });\n//           }, 2000); // Redirect after 2 seconds\n//         } else {\n//           setError(\"Incorrect password\");\n//         }\n//       } else {\n//         setError(\"User not found. Please register first.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error during login:\", error);\n//       setError(\"An error occurred during login.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Login</h1>\n//         {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}{\" \"}\n//         {/* Display error message */}\n//         {redirectMessage && (\n//           <p className=\"text-green-500 text-center mb-4\">{redirectMessage}</p>\n//         )}{\" \"}\n//         {/* Display redirect message */}\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"bg-purple-900 p-6 rounded-lg shadow-lg\"\n//           autoComplete=\"off\"\n//         >\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">\n//               Email\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\" // Corrected name to match state key\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-email\"\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"password\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\" // Corrected name to match state key\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-password\"\n//             />\n//           </div>\n\n//           <div className=\"mb-6\">\n//             <label htmlFor=\"role\" className=\"block text-lg font-medium mb-2\">\n//               Role\n//             </label>\n//             <select\n//               id=\"role\"\n//               name=\"role\"\n//               value={formData.role}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//             >\n//               <option value=\"\">Select a role</option>\n//               <option value=\"User\">User</option>\n//               <option value=\"Admin\">Admin</option>\n//               <option value=\"Moderator\">Moderator</option>\n//             </select>\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n//           >\n//             Login\n//           </button>\n//         </form>\n//         <div className=\"mt-4 text-center\">\n//           <p>\n//             Don't have an account?{\" \"}\n//             <a href=\"/\" className=\"text-purple-400\">\n//               Register\n//             </a>\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Login;\n\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { supabase } from \"../supabaseClient\";\n// import bcrypt from \"bcryptjs\"; // Import bcryptjs for password comparison\n\n// function Login() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [redirectMessage, setRedirectMessage] = useState(\"\");\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Fetch user data from the 'users' table\n//       const { data, error: queryError } = await supabase\n//         .from(\"users\")\n//         .select(\"*\")\n//         .eq(\"email\", formData.email)\n//         .single();\n\n//       if (queryError) throw queryError;\n\n//       if (data) {\n//         // Compare entered password with the hashed password from Supabase\n//         const isPasswordValid = await bcrypt.compare(formData.password, data.password);\n\n//         if (isPasswordValid) {\n//           console.log(\"Login Successful\");\n//           setRedirectMessage(\"Redirecting to Home...\");\n//           setTimeout(() => navigate(\"/Home\", { state: { userId: data.id } }), 2000); // Redirect after 2 seconds\n//         } else {\n//           setError(\"Incorrect password\");\n//         }\n//       } else {\n//         setError(\"User not found. Please register first.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error during login:\", error);\n//       setError(\"An error occurred during login.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Login</h1>\n//         {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\n//         {redirectMessage && <p className=\"text-green-500 text-center mb-4\">{redirectMessage}</p>}\n//         <form onSubmit={handleSubmit} className=\"bg-purple-900 p-6 rounded-lg shadow-lg\" autoComplete=\"off\">\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"password\" className=\"block text-lg font-medium mb-2\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">Login</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Login;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}