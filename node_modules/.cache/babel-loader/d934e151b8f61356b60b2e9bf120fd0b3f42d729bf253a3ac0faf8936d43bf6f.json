{"ast":null,"code":"var _jsxFileName = \"/home/saitejasangisapu/Desktop/new project/rbac/src/components/Register.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { supabase } from \"../supabaseClient\";\n\n// function Registration() {\n//   const [formData, setFormData] = useState({\n//     fullName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     role: \"User\",\n//   });\n\n//   const [message, setMessage] = useState(\"\"); // To store success or error message\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n\n//     try {\n//       // Insert form data into the 'users' table in Supabase\n//       const { data, error } = await supabase\n//         .from(\"users\") // Replace with your table name\n//         .insert([\n//           {\n//             full_name: formData.fullName,\n//             email: formData.email,\n//             password: formData.password,\n//             role: formData.role,\n//           },\n//         ]);\n\n//       if (error) {\n//         throw error;\n//       }\n\n//       console.log(\"Registration successful:\", data);\n//       setMessage(\"Registration Successful! Please login.\");\n//       setFormData({ fullName: \"\", email: \"\", password: \"\", role: \"User\" }); // Clear the form\n//     } catch (error) {\n//       console.error(\"Error registering user:\", error);\n//       setMessage(\"Error during registration. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Register</h1>\n\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"bg-purple-900 p-6 rounded-lg shadow-lg\"\n//         >\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"fullName\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Full Name\n//             </label>\n//             <input\n//               type=\"text\"\n//               id=\"fullName\"\n//               name=\"fullName\"\n//               value={formData.fullName}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">\n//               Email\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"off\" // Prevents autofill\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"password\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-password\" // Ensures new password input is not auto-filled\n//             />\n//           </div>\n\n//           <div className=\"mb-6\">\n//             <label htmlFor=\"role\" className=\"block text-lg font-medium mb-2\">\n//               Role\n//             </label>\n//             <select\n//               id=\"role\"\n//               name=\"role\"\n//               value={formData.role}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//             >\n//               <option value=\"User\">User</option>\n//               <option value=\"Admin\">Admin</option>\n//               <option value=\"Moderator\">Moderator</option>\n//             </select>\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n//           >\n//             Register\n//           </button>\n//         </form>\n\n//         {message && (\n//           <div className=\"mt-4 text-center\">\n//             <p className=\"text-lg\">{message}</p>\n//           </div>\n//         )}\n\n//         <div className=\"mt-4 text-center\">\n//           <p>\n//             Already have an account?{\" \"}\n//             <a href=\"/login\" className=\"text-purple-400\">\n//               Login\n//             </a>\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Registration;\n\n// import React, { useState } from \"react\";\n// import { supabase } from \"../supabaseClient\";\n// import bcrypt from \"bcryptjs\"; // Import bcryptjs for password hashing\n\n// function Register() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Hash the password using bcrypt\n//       const hashedPassword = await bcrypt.hash(formData.password, 10);\n\n//       // Insert user data into Supabase (ensure the password is hashed)\n//       const { data, error } = await supabase\n//         .from(\"users\")\n//         .insert([\n//           {\n//             email: formData.email,\n//             password: hashedPassword,\n//           },\n//         ]);\n\n//       if (error) throw error;\n\n//       setSuccess(\"Registration successful! You can now log in.\");\n//     } catch (error) {\n//       setError(\"Error during registration: \" + error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Register</h1>\n//         {error && <p className=\"text-red-500 text-center\">{error}</p>}\n//         {success && <p className=\"text-green-500 text-center\">{success}</p>}\n//         <form onSubmit={handleSubmit} className=\"bg-purple-900 p-6 rounded-lg shadow-lg\" autoComplete=\"off\">\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"password\" className=\"block text-lg font-medium mb-2\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">Register</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Register;\n\nimport React, { useState } from \"react\";\nimport { supabase } from \"../supabaseClient\";\nimport bcrypt from \"bcryptjs\"; // Import bcryptjs for password hashing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Registration() {\n  _s();\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"User\"\n  });\n  const [message, setMessage] = useState(\"\"); // To store success or error message\n  const [loading, setLoading] = useState(false); // For loading state\n  const [error, setError] = useState(\"\"); // For error messages\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const validateEmail = email => {\n    const regex = /\\S+@\\S+\\.\\S+/;\n    return regex.test(email);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(\"\"); // Reset error message\n    setMessage(\"\"); // Reset message\n    setLoading(true);\n    if (!validateEmail(formData.email)) {\n      setLoading(false);\n      setError(\"Please enter a valid email.\");\n      return;\n    }\n    try {\n      // Check if the email already exists in the 'users' table\n      const {\n        data: existingUser,\n        error: checkError\n      } = await supabase.from(\"users\").select(\"email\").eq(\"email\", formData.email).single();\n      if (checkError) {\n        throw checkError;\n      }\n      if (existingUser) {\n        setLoading(false);\n        setError(\"Email is already registered. Please use a different one.\");\n        return;\n      }\n\n      // Hash the password before storing it in the database\n      const hashedPassword = await bcrypt.hash(formData.password, 10);\n\n      // Insert form data into the 'users' table in Supabase\n      const {\n        data,\n        error\n      } = await supabase.from(\"users\").insert([{\n        full_name: formData.fullName,\n        email: formData.email,\n        password: hashedPassword,\n        // Store the hashed password\n        role: formData.role\n      }]);\n      if (error) {\n        throw error;\n      }\n      console.log(\"Registration successful:\", data);\n      setMessage(\"Registration Successful! Please login.\");\n      setFormData({\n        fullName: \"\",\n        email: \"\",\n        password: \"\",\n        role: \"User\"\n      }); // Clear the form\n    } catch (error) {\n      console.error(\"Error registering user:\", error);\n      setError(\"Error during registration. Please try again.\");\n    } finally {\n      setLoading(false); // Stop loading after the request is complete\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-black text-white flex justify-center items-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold mb-6 text-center\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-center mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 19\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-green-500 text-center mb-4\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"bg-purple-900 p-6 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"fullName\",\n            className: \"block text-lg font-medium mb-2\",\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"fullName\",\n            name: \"fullName\",\n            value: formData.fullName,\n            onChange: handleChange,\n            className: \"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            className: \"block text-lg font-medium mb-2\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleChange,\n            className: \"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\",\n            required: true,\n            autoComplete: \"off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            className: \"block text-lg font-medium mb-2\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            value: formData.password,\n            onChange: handleChange,\n            className: \"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\",\n            required: true,\n            autoComplete: \"new-password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"role\",\n            className: \"block text-lg font-medium mb-2\",\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"role\",\n            name: \"role\",\n            value: formData.role,\n            onChange: handleChange,\n            className: \"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"User\",\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Admin\",\n              children: \"Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Moderator\",\n              children: \"Moderator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\",\n          disabled: loading // Disable the button during loading\n          ,\n          children: loading ? \"Registering...\" : \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Already have an account?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"/login\",\n            className: \"text-purple-400\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n}\n_s(Registration, \"EraiAuiDPkV2ZUBoMMnzCNVvM7Q=\");\n_c = Registration;\nexport default Registration;\nvar _c;\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["React","useState","supabase","bcrypt","jsxDEV","_jsxDEV","Registration","_s","formData","setFormData","fullName","email","password","role","message","setMessage","loading","setLoading","error","setError","handleChange","e","name","value","target","prevData","validateEmail","regex","test","handleSubmit","preventDefault","data","existingUser","checkError","from","select","eq","single","hashedPassword","hash","insert","full_name","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","required","autoComplete","disabled","href","_c","$RefreshReg$"],"sources":["/home/saitejasangisapu/Desktop/new project/rbac/src/components/Register.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { supabase } from \"../supabaseClient\";\n\n// function Registration() {\n//   const [formData, setFormData] = useState({\n//     fullName: \"\",\n//     email: \"\",\n//     password: \"\",\n//     role: \"User\",\n//   });\n\n//   const [message, setMessage] = useState(\"\"); // To store success or error message\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(formData);\n\n//     try {\n//       // Insert form data into the 'users' table in Supabase\n//       const { data, error } = await supabase\n//         .from(\"users\") // Replace with your table name\n//         .insert([\n//           {\n//             full_name: formData.fullName,\n//             email: formData.email,\n//             password: formData.password,\n//             role: formData.role,\n//           },\n//         ]);\n\n//       if (error) {\n//         throw error;\n//       }\n\n//       console.log(\"Registration successful:\", data);\n//       setMessage(\"Registration Successful! Please login.\");\n//       setFormData({ fullName: \"\", email: \"\", password: \"\", role: \"User\" }); // Clear the form\n//     } catch (error) {\n//       console.error(\"Error registering user:\", error);\n//       setMessage(\"Error during registration. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Register</h1>\n\n//         <form\n//           onSubmit={handleSubmit}\n//           className=\"bg-purple-900 p-6 rounded-lg shadow-lg\"\n//         >\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"fullName\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Full Name\n//             </label>\n//             <input\n//               type=\"text\"\n//               id=\"fullName\"\n//               name=\"fullName\"\n//               value={formData.fullName}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">\n//               Email\n//             </label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"off\" // Prevents autofill\n//             />\n//           </div>\n\n//           <div className=\"mb-4\">\n//             <label\n//               htmlFor=\"password\"\n//               className=\"block text-lg font-medium mb-2\"\n//             >\n//               Password\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//               autoComplete=\"new-password\" // Ensures new password input is not auto-filled\n//             />\n//           </div>\n\n//           <div className=\"mb-6\">\n//             <label htmlFor=\"role\" className=\"block text-lg font-medium mb-2\">\n//               Role\n//             </label>\n//             <select\n//               id=\"role\"\n//               name=\"role\"\n//               value={formData.role}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//             >\n//               <option value=\"User\">User</option>\n//               <option value=\"Admin\">Admin</option>\n//               <option value=\"Moderator\">Moderator</option>\n//             </select>\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n//           >\n//             Register\n//           </button>\n//         </form>\n\n//         {message && (\n//           <div className=\"mt-4 text-center\">\n//             <p className=\"text-lg\">{message}</p>\n//           </div>\n//         )}\n\n//         <div className=\"mt-4 text-center\">\n//           <p>\n//             Already have an account?{\" \"}\n//             <a href=\"/login\" className=\"text-purple-400\">\n//               Login\n//             </a>\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Registration;\n\n\n// import React, { useState } from \"react\";\n// import { supabase } from \"../supabaseClient\";\n// import bcrypt from \"bcryptjs\"; // Import bcryptjs for password hashing\n\n// function Register() {\n//   const [formData, setFormData] = useState({\n//     email: \"\",\n//     password: \"\",\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevData) => ({\n//       ...prevData,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setError(\"\"); // Reset error message\n\n//     try {\n//       // Hash the password using bcrypt\n//       const hashedPassword = await bcrypt.hash(formData.password, 10);\n\n//       // Insert user data into Supabase (ensure the password is hashed)\n//       const { data, error } = await supabase\n//         .from(\"users\")\n//         .insert([\n//           {\n//             email: formData.email,\n//             password: hashedPassword,\n//           },\n//         ]);\n\n//       if (error) throw error;\n\n//       setSuccess(\"Registration successful! You can now log in.\");\n//     } catch (error) {\n//       setError(\"Error during registration: \" + error.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n//       <div className=\"w-full max-w-md\">\n//         <h1 className=\"text-4xl font-bold mb-6 text-center\">Register</h1>\n//         {error && <p className=\"text-red-500 text-center\">{error}</p>}\n//         {success && <p className=\"text-green-500 text-center\">{success}</p>}\n//         <form onSubmit={handleSubmit} className=\"bg-purple-900 p-6 rounded-lg shadow-lg\" autoComplete=\"off\">\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">Email</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               name=\"email\"\n//               value={formData.email}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <div className=\"mb-4\">\n//             <label htmlFor=\"password\" className=\"block text-lg font-medium mb-2\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               name=\"password\"\n//               value={formData.password}\n//               onChange={handleChange}\n//               className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n//               required\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">Register</button>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Register;\n\nimport React, { useState } from \"react\";\nimport { supabase } from \"../supabaseClient\";\nimport bcrypt from \"bcryptjs\"; // Import bcryptjs for password hashing\n\nfunction Registration() {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"User\",\n  });\n\n  const [message, setMessage] = useState(\"\"); // To store success or error message\n  const [loading, setLoading] = useState(false); // For loading state\n  const [error, setError] = useState(\"\"); // For error messages\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const validateEmail = (email) => {\n    const regex = /\\S+@\\S+\\.\\S+/;\n    return regex.test(email);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\"); // Reset error message\n    setMessage(\"\"); // Reset message\n    setLoading(true);\n\n    if (!validateEmail(formData.email)) {\n      setLoading(false);\n      setError(\"Please enter a valid email.\");\n      return;\n    }\n\n    try {\n      // Check if the email already exists in the 'users' table\n      const { data: existingUser, error: checkError } = await supabase\n        .from(\"users\")\n        .select(\"email\")\n        .eq(\"email\", formData.email)\n        .single();\n\n      if (checkError) {\n        throw checkError;\n      }\n\n      if (existingUser) {\n        setLoading(false);\n        setError(\"Email is already registered. Please use a different one.\");\n        return;\n      }\n\n      // Hash the password before storing it in the database\n      const hashedPassword = await bcrypt.hash(formData.password, 10);\n\n      // Insert form data into the 'users' table in Supabase\n      const { data, error } = await supabase.from(\"users\").insert([\n        {\n          full_name: formData.fullName,\n          email: formData.email,\n          password: hashedPassword, // Store the hashed password\n          role: formData.role,\n        },\n      ]);\n\n      if (error) {\n        throw error;\n      }\n\n      console.log(\"Registration successful:\", data);\n      setMessage(\"Registration Successful! Please login.\");\n      setFormData({ fullName: \"\", email: \"\", password: \"\", role: \"User\" }); // Clear the form\n    } catch (error) {\n      console.error(\"Error registering user:\", error);\n      setError(\"Error during registration. Please try again.\");\n    } finally {\n      setLoading(false); // Stop loading after the request is complete\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white flex justify-center items-center\">\n      <div className=\"w-full max-w-md\">\n        <h1 className=\"text-4xl font-bold mb-6 text-center\">Register</h1>\n\n        {/* Display error message */}\n        {error && <p className=\"text-red-500 text-center mb-4\">{error}</p>}\n\n        {/* Display success message */}\n        {message && <p className=\"text-green-500 text-center mb-4\">{message}</p>}\n\n        <form onSubmit={handleSubmit} className=\"bg-purple-900 p-6 rounded-lg shadow-lg\">\n          <div className=\"mb-4\">\n            <label htmlFor=\"fullName\" className=\"block text-lg font-medium mb-2\">\n              Full Name\n            </label>\n            <input\n              type=\"text\"\n              id=\"fullName\"\n              name=\"fullName\"\n              value={formData.fullName}\n              onChange={handleChange}\n              className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n              required\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label htmlFor=\"email\" className=\"block text-lg font-medium mb-2\">\n              Email\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n              required\n              autoComplete=\"off\"\n            />\n          </div>\n\n          <div className=\"mb-4\">\n            <label htmlFor=\"password\" className=\"block text-lg font-medium mb-2\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n              required\n              autoComplete=\"new-password\"\n            />\n          </div>\n\n          <div className=\"mb-6\">\n            <label htmlFor=\"role\" className=\"block text-lg font-medium mb-2\">\n              Role\n            </label>\n            <select\n              id=\"role\"\n              name=\"role\"\n              value={formData.role}\n              onChange={handleChange}\n              className=\"w-full p-3 rounded-lg bg-purple-800 text-white border border-purple-700\"\n            >\n              <option value=\"User\">User</option>\n              <option value=\"Admin\">Admin</option>\n              <option value=\"Moderator\">Moderator</option>\n            </select>\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"w-full p-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n            disabled={loading} // Disable the button during loading\n          >\n            {loading ? \"Registering...\" : \"Register\"}\n          </button>\n        </form>\n\n        <div className=\"mt-4 text-center\">\n          <p>\n            Already have an account?{\" \"}\n            <a href=\"/login\" className=\"text-purple-400\">\n              Login\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Registration;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}